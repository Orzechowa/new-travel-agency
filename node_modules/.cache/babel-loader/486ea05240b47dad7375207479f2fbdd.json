{"ast":null,"code":"import pricing from '../data/pricing.json';\nimport { parseOptionPrice } from './parseOptionPrice';\nexport const calculateTotal = (tripCost, options) => {\n  let total = parseOptionPrice(tripCost).value;\n  let multiplier = 0;\n\n  for (let option of pricing) {\n    const currentValue = options[option.id];\n\n    if (typeof currentValue != 'undefined') {\n      if (Array.isArray(currentValue) && Array.isArray(option.values)) {\n        for (let optionId of currentValue) {\n          const value = option.values.filter(opt => opt.id == optionId)[0];\n          const price = parseOptionPrice(value.price);\n\n          if (price.type == 'multiplier') {\n            multiplier += price.value;\n          } else if (price.type == 'number') {\n            total += price.value;\n          }\n        }\n      } else if (currentValue !== '' && Array.isArray(option.values)) {\n        const value = option.values.filter(opt => opt.id == currentValue)[0];\n        const price = parseOptionPrice(value.price);\n\n        if (price.type == 'multiplier') {\n          multiplier += price.value;\n        } else if (price.type == 'number') {\n          total += price.value;\n        }\n      } else if (option.type == 'number') {\n        const price = parseOptionPrice(option.price);\n\n        if (price.type == 'multiplier') {\n          multiplier += price.value * currentValue;\n        } else if (price.type == 'number') {\n          total += price.value * currentValue;\n        }\n      }\n    }\n  }\n\n  return total * multiplier;\n};","map":{"version":3,"sources":["/Users/ORZECH/Desktop/EWA/new-travel-agency/src/utils/calculateTotal.js"],"names":["pricing","parseOptionPrice","calculateTotal","tripCost","options","total","value","multiplier","option","currentValue","id","Array","isArray","values","optionId","filter","opt","price","type"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,sBAApB;AACA,SAAQC,gBAAR,QAA+B,oBAA/B;AAEA,OAAO,MAAMC,cAAc,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuB;AACnD,MAAIC,KAAK,GAAGJ,gBAAgB,CAACE,QAAD,CAAhB,CAA2BG,KAAvC;AACA,MAAIC,UAAU,GAAG,CAAjB;;AACA,OAAK,IAAIC,MAAT,IAAmBR,OAAnB,EAA4B;AAC1B,UAAMS,YAAY,GAAGL,OAAO,CAACI,MAAM,CAACE,EAAR,CAA5B;;AACA,QAAI,OAAQD,YAAR,IAAyB,WAA7B,EAA0C;AACxC,UAAIE,KAAK,CAACC,OAAN,CAAcH,YAAd,KAA+BE,KAAK,CAACC,OAAN,CAAcJ,MAAM,CAACK,MAArB,CAAnC,EAAiE;AAC/D,aAAK,IAAIC,QAAT,IAAqBL,YAArB,EAAmC;AACjC,gBAAMH,KAAK,GAAGE,MAAM,CAACK,MAAP,CAAcE,MAAd,CAAqBC,GAAG,IAAIA,GAAG,CAACN,EAAJ,IAAUI,QAAtC,EAAgD,CAAhD,CAAd;AACA,gBAAMG,KAAK,GAAGhB,gBAAgB,CAACK,KAAK,CAACW,KAAP,CAA9B;;AACA,cAAIA,KAAK,CAACC,IAAN,IAAc,YAAlB,EAAgC;AAC9BX,YAAAA,UAAU,IAAIU,KAAK,CAACX,KAApB;AACD,WAFD,MAGK,IAAIW,KAAK,CAACC,IAAN,IAAc,QAAlB,EAA4B;AAC/Bb,YAAAA,KAAK,IAAIY,KAAK,CAACX,KAAf;AACD;AACF;AACF,OAXD,MAYK,IAAIG,YAAY,KAAK,EAAjB,IAAuBE,KAAK,CAACC,OAAN,CAAcJ,MAAM,CAACK,MAArB,CAA3B,EAAyD;AAC5D,cAAMP,KAAK,GAAGE,MAAM,CAACK,MAAP,CAAcE,MAAd,CAAqBC,GAAG,IAAIA,GAAG,CAACN,EAAJ,IAAUD,YAAtC,EAAoD,CAApD,CAAd;AACA,cAAMQ,KAAK,GAAGhB,gBAAgB,CAACK,KAAK,CAACW,KAAP,CAA9B;;AACA,YAAIA,KAAK,CAACC,IAAN,IAAc,YAAlB,EAAgC;AAC9BX,UAAAA,UAAU,IAAIU,KAAK,CAACX,KAApB;AACD,SAFD,MAGK,IAAIW,KAAK,CAACC,IAAN,IAAc,QAAlB,EAA4B;AAC/Bb,UAAAA,KAAK,IAAIY,KAAK,CAACX,KAAf;AACD;AACF,OATI,MAUA,IAAIE,MAAM,CAACU,IAAP,IAAe,QAAnB,EAA6B;AAChC,cAAMD,KAAK,GAAGhB,gBAAgB,CAACO,MAAM,CAACS,KAAR,CAA9B;;AACA,YAAIA,KAAK,CAACC,IAAN,IAAc,YAAlB,EAAgC;AAC9BX,UAAAA,UAAU,IAAIU,KAAK,CAACX,KAAN,GAAcG,YAA5B;AACD,SAFD,MAGK,IAAIQ,KAAK,CAACC,IAAN,IAAc,QAAlB,EAA4B;AAC/Bb,UAAAA,KAAK,IAAIY,KAAK,CAACX,KAAN,GAAcG,YAAvB;AACD;AACF;AACF;AACF;;AACD,SAAOJ,KAAK,GAAGE,UAAf;AACD,CAxCM","sourcesContent":["import pricing from '../data/pricing.json';\nimport {parseOptionPrice} from './parseOptionPrice';\n\nexport const calculateTotal = (tripCost, options) => {\n  let total = parseOptionPrice(tripCost).value;\n  let multiplier = 0;\n  for (let option of pricing) {\n    const currentValue = options[option.id];\n    if (typeof (currentValue) != 'undefined') {\n      if (Array.isArray(currentValue) && Array.isArray(option.values)) {\n        for (let optionId of currentValue) {\n          const value = option.values.filter(opt => opt.id == optionId)[0];\n          const price = parseOptionPrice(value.price);\n          if (price.type == 'multiplier') {\n            multiplier += price.value;\n          }\n          else if (price.type == 'number') {\n            total += price.value;\n          }\n        }\n      }\n      else if (currentValue !== '' && Array.isArray(option.values)) {\n        const value = option.values.filter(opt => opt.id == currentValue)[0];\n        const price = parseOptionPrice(value.price);\n        if (price.type == 'multiplier') {\n          multiplier += price.value;\n        }\n        else if (price.type == 'number') {\n          total += price.value;\n        }\n      }\n      else if (option.type == 'number') {\n        const price = parseOptionPrice(option.price);\n        if (price.type == 'multiplier') {\n          multiplier += price.value * currentValue;\n        }\n        else if (price.type == 'number') {\n          total += price.value * currentValue;\n        }\n      }\n    }\n  }\n  return total * multiplier;\n};\n"]},"metadata":{},"sourceType":"module"}