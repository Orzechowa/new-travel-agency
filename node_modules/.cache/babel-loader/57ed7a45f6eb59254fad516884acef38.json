{"ast":null,"code":"import countries from '../data/countries.json';\nimport pricing from '../data/pricing.json';\n\nconst parseTrips = (trips, setStates) => {\n  const newState = {\n    countries: {},\n    regions: {},\n    subregions: {},\n    tags: {},\n    order: {\n      trip: null,\n      email: '',\n      options: {}\n    }\n  };\n\n  for (let trip of trips) {\n    /* add country to newState.countries */\n    if (typeof newState.countries[trip.country.code] === 'undefined') {\n      const countryDetails = countries.filter(item => item.alpha3Code === trip.country.code)[0] || {};\n      newState.countries[trip.country.code] = JSON.parse(JSON.stringify(countryDetails));\n      newState.countries[trip.country.code].trips = [trip.id];\n    } else {\n      newState.countries[trip.country.code].trips.push(trip.id);\n    }\n    /* add all tags to newState.tags */\n\n\n    for (let tag of trip.tags) {\n      if (typeof newState.tags[tag] === 'undefined') {\n        newState.tags[tag] = {\n          trips: [trip.id]\n        };\n      } else {\n        newState.tags[tag].trips.push(trip.id);\n      }\n    }\n  }\n\n  for (let countryCode in newState.countries) {\n    const country = newState.countries[countryCode];\n    /* add region to newState.regions */\n\n    if (typeof newState.regions[country.region] === 'undefined') {\n      newState.regions[country.region] = {\n        countries: [country.alpha3Code],\n        subregions: [country.subregion]\n      };\n    } else if (newState.regions[country.region].subregions.indexOf(country.subregion) === -1) {\n      newState.regions[country.region].subregions.push(country.subregion);\n      newState.regions[country.region].countries.push(country.alpha3Code);\n    } else if (newState.regions[country.region].countries.indexOf(country.alpha3Code) === -1) {\n      newState.regions[country.region].countries.push(country.alpha3Code);\n    }\n    /* add subregion to newState.subregions */\n\n\n    if (typeof newState.subregions[country.subregion] === 'undefined') {\n      newState.subregions[country.subregion] = {\n        region: country.region,\n        countries: [country.alpha3Code]\n      };\n    } else if (newState.subregions[country.subregion].countries.indexOf(country.alpha3Code) === -1) {\n      newState.subregions[country.subregion].countries.push(country.alpha3Code);\n    }\n  }\n\n  for (let option of pricing) {\n    if (typeof option.defaultValue !== 'undefined') {\n      newState.order.options[option.id] = option.defaultValue;\n    } else if (typeof option.limits !== 'undefined' && typeof option.limits.min !== 'undefined') {\n      newState.order.options[option.id] = option.limits.min;\n    } else if (option.type === 'checkboxes') {\n      newState.order.options[option.id] = [];\n    } else {\n      newState.order.options[option.id] = '';\n    }\n  }\n\n  setStates(newState);\n};\n\nexport default parseTrips;","map":{"version":3,"sources":["/Users/ORZECH/Desktop/EWA/new-travel-agency/src/utils/parseTrips.js"],"names":["countries","pricing","parseTrips","trips","setStates","newState","regions","subregions","tags","order","trip","email","options","country","code","countryDetails","filter","item","alpha3Code","JSON","parse","stringify","id","push","tag","countryCode","region","subregion","indexOf","option","defaultValue","limits","min","type"],"mappings":"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","sourcesContent":["import countries from '../data/countries.json';\nimport pricing from '../data/pricing.json';\n\nconst parseTrips = (trips, setStates) => {\n  const newState = {\n    countries: {},\n    regions: {},\n    subregions: {},\n    tags: {},\n    order: {\n      trip: null,\n      email: '',\n      options: {},\n    },\n  };\n\n  for(let trip of trips){\n\n    /* add country to newState.countries */\n    if(typeof(newState.countries[trip.country.code]) === 'undefined'){\n      const countryDetails = countries.filter(item => item.alpha3Code === trip.country.code)[0] || {};\n      newState.countries[trip.country.code] = JSON.parse(JSON.stringify(countryDetails));\n      newState.countries[trip.country.code].trips = [trip.id];\n    } else {\n      newState.countries[trip.country.code].trips.push(trip.id);\n    }\n\n    /* add all tags to newState.tags */\n    for(let tag of trip.tags){\n      if(typeof(newState.tags[tag]) === 'undefined'){\n        newState.tags[tag] = {trips: [trip.id]};\n      } else {\n        newState.tags[tag].trips.push(trip.id);\n      }\n    }\n  }\n\n  for(let countryCode in newState.countries){\n    const country = newState.countries[countryCode];\n\n    /* add region to newState.regions */\n    if(typeof(newState.regions[country.region]) === 'undefined'){\n      newState.regions[country.region] = {\n        countries: [country.alpha3Code],\n        subregions: [country.subregion],\n      };\n    } else if(newState.regions[country.region].subregions.indexOf(country.subregion) === -1) {\n      newState.regions[country.region].subregions.push(country.subregion);\n      newState.regions[country.region].countries.push(country.alpha3Code);\n    } else if(newState.regions[country.region].countries.indexOf(country.alpha3Code) === -1) {\n      newState.regions[country.region].countries.push(country.alpha3Code);\n    }\n\n    /* add subregion to newState.subregions */\n    if(typeof(newState.subregions[country.subregion]) === 'undefined'){\n      newState.subregions[country.subregion] = {\n        region: country.region,\n        countries: [country.alpha3Code],\n      };\n    } else if(newState.subregions[country.subregion].countries.indexOf(country.alpha3Code) === -1) {\n      newState.subregions[country.subregion].countries.push(country.alpha3Code);\n    }\n  }\n\n  for(let option of pricing){\n    if(typeof(option.defaultValue) !== 'undefined'){\n      newState.order.options[option.id] = option.defaultValue;\n    } else if(typeof(option.limits) !== 'undefined' && typeof(option.limits.min) !== 'undefined'){\n      newState.order.options[option.id] = option.limits.min;\n    } else if(option.type === 'checkboxes'){\n      newState.order.options[option.id] = [];\n    } else {\n      newState.order.options[option.id] = '';\n    }\n  }\n\n  setStates(newState);\n};\n\nexport default parseTrips;\n"]},"metadata":{},"sourceType":"module"}