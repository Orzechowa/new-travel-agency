{"ast":null,"code":"export const parseOptionPrice = price => {\n  if (typeof price === 'number') {\n    return {\n      type: 'number',\n      value: price\n    };\n  } else {\n    const priceParsed = price.replace(/^\\$\\s*/, '').replace(/,/g, '');\n    const pricePercent = priceParsed.match(/(^\\d+)%$/);\n\n    if (pricePercent) {\n      return {\n        type: 'multiplier',\n        value: parseFloat(pricePercent[1]) / 100\n      };\n    } else if (!isNaN(priceParsed)) {\n      return {\n        type: 'number',\n        value: parseFloat(priceParsed)\n      };\n    } else {\n      return {\n        type: 'error',\n        value: 0\n      };\n    }\n  }\n};","map":{"version":3,"sources":["/Users/ORZECH/Desktop/EWA/new-travel-agency/src/utils/parseOptionPrice.js"],"names":["parseOptionPrice","price","type","value","priceParsed","replace","pricePercent","match","parseFloat","isNaN"],"mappings":"AAAA,OAAO,MAAMA,gBAAgB,GAAGC,KAAK,IAAI;AACvC,MAAI,OAAQA,KAAR,KAAmB,QAAvB,EAAiC;AAC/B,WAAO;AAAEC,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,KAAK,EAAEF;AAAzB,KAAP;AACD,GAFD,MAGK;AACH,UAAMG,WAAW,GAAGH,KAAK,CAACI,OAAN,CAAc,QAAd,EAAwB,EAAxB,EAA4BA,OAA5B,CAAoC,IAApC,EAA0C,EAA1C,CAApB;AACA,UAAMC,YAAY,GAAGF,WAAW,CAACG,KAAZ,CAAkB,UAAlB,CAArB;;AACA,QAAID,YAAJ,EAAkB;AAChB,aAAO;AAAEJ,QAAAA,IAAI,EAAE,YAAR;AAAsBC,QAAAA,KAAK,EAAEK,UAAU,CAACF,YAAY,CAAC,CAAD,CAAb,CAAV,GAA8B;AAA3D,OAAP;AACD,KAFD,MAGK,IAAI,CAACG,KAAK,CAACL,WAAD,CAAV,EAAyB;AAC5B,aAAO;AAAEF,QAAAA,IAAI,EAAE,QAAR;AAAkBC,QAAAA,KAAK,EAAEK,UAAU,CAACJ,WAAD;AAAnC,OAAP;AACD,KAFI,MAGA;AACH,aAAO;AAAEF,QAAAA,IAAI,EAAE,OAAR;AAAiBC,QAAAA,KAAK,EAAE;AAAxB,OAAP;AACD;AACF;AACF,CAjBM","sourcesContent":["export const parseOptionPrice = price => {\n  if (typeof (price) === 'number') {\n    return { type: 'number', value: price };\n  }\n  else {\n    const priceParsed = price.replace(/^\\$\\s*/, '').replace(/,/g, '');\n    const pricePercent = priceParsed.match(/(^\\d+)%$/);\n    if (pricePercent) {\n      return { type: 'multiplier', value: parseFloat(pricePercent[1]) / 100 };\n    }\n    else if (!isNaN(priceParsed)) {\n      return { type: 'number', value: parseFloat(priceParsed) };\n    }\n    else {\n      return { type: 'error', value: 0 };\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}